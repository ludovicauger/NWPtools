#!/bin/sh
#=====================================================
# Computation of the A and B of the hybrid coordinate.
# The top pressure is assumed to be equal to zero.
#=====================================================
# This version is written in F90,
# and uses 64 bits variables.
# 13/06/2017 release in free format.
#
# Last modifications since jun 2013:
#  - compile using mpifort
#=====================================================
# Documentation : memoeta.tex (P. Benard, 2004)
#   Design of the hybrid vertical coordinate "eta".
#
# Hybridicity strictly follows (Benard, 2004).
#
# Stretching function (ZM) is computed according a
# new algorithm. Atmosphere is split into JPDOM vertical
# domains (instead of 3):
#
# Tunable variables to compute ZM are:
# - Height of the lower full level.
# - Pressure of the upper full level.
# - Heights and height depths of "vertical domains" interfaces.
#
# Altitudes at each half-level are computed using a 5th order polynomial
# function matching tunable parameters.
#
# Number of layers for each "vertical domains" are tunable variables,
# but the program computes recommended numbers ensuring
# regular variations of height depths.
#
# Standard atmosphere is used to do conversions between
# standard pressure and standard height; in particuliar,
# once computed half-level heights, routine PRESTA
# computes half-level pressures.
#=====================================================
# Authors: P. Benard and K. Yessad (MF/CNRM/GMAP)
#=====================================================



cat <<EOF > prog.F90
PROGRAM AETB

!     ------------------------------------------------------------------

IMPLICIT NONE

! * INTEGER PARAMETER:
! - JPN: Total number of layers.
INTEGER*8,PARAMETER :: JPN=90
INTEGER*8,PARAMETER :: JPNP=JPN+1
! - JPNPRES: Total number of pure pressure layers (minimum 1 included).
INTEGER*8,PARAMETER :: JPNPRES=1
! - JPNSIGM: Total number of pure sigma layers (minimum 1 included).
INTEGER*8,PARAMETER :: JPNSIGM=90
! - JPDOM: Total number of vertical domains (minimum 3).
INTEGER*8,PARAMETER :: JPDOM=8

! * REAL LOCAL:
REAL*8 :: ZP1
REAL*8 :: ZP1H
REAL*8 :: ZVP00
REAL*8 :: ZVP00PR
REAL*8 :: ZALPH
REAL*8 :: ZX
REAL*8 :: ZALTF(JPN),ZALTH(JPNP)
REAL*8 :: ZALT_TEST,ZALTH_TEST
REAL*8 :: ZPREF(JPN),ZPREH(JPNP)
REAL*8 :: ZPREHYDF(JPN),ZPREHYDH(JPNP),ZDELP(JPN)
REAL*8 :: ZVP200
REAL*8 :: ZAA
REAL*8 :: ZBB
REAL*8 :: ZETAP
REAL*8 :: ZETAS
REAL*8 :: ZM(0:JPN)
REAL*8 :: ZH(0:JPN)
REAL*8 :: ZAF(JPNP)
REAL*8 :: ZBF(JPNP)
REAL*8 :: ZRST(JPNP)
REAL*8 :: ZSIG(JPNP)
REAL*8 :: ZALT_PROV(1)
REAL*8 :: ZALTH_PROV(1)
REAL*8 :: ZPRE_PROV(1)
REAL*8 :: ZPREH_PROV(1)
REAL*8 :: ZALT_DOM(JPDOM)
REAL*8 :: ZALT_BOT
REAL*8 :: ZDALT_DOM(JPDOM)
REAL*8 :: ZDALT_BOT
REAL*8 :: ZI_DOM(JPDOM)
REAL*8 :: ZI_TOT
REAL*8 :: ZLEV0,ZLEV1,ZLEV2,ZLEV3,ZLEV4,ZLEV
REAL*8 :: ZVAL0,ZVAL1,ZVAL2,ZVAL3,ZVAL4
REAL*8 :: ZC0,ZC1,ZC2,ZC3,ZC4

! * CHARACTER LOCAL:
CHARACTER*7 :: CLNAM_DOM(JPDOM)

! * INTEGER LOCAL SCALARS:
INTEGER*8 :: IFILE0,IFILE1,IFILE2,IFILE3,ILEV,JK,JLEV,I1
INTEGER*8 :: IN,INP,INPRES,INSIGM,II,IDOM,JDOM
INTEGER*8 :: I_BOT,I_TOT
INTEGER*8 :: I_DOM(JPDOM)
INTEGER*8 :: IT_DOM(JPDOM)

! * LOGICAL LOCAL SCALARS:
LOGICAL :: LLAPRXPK

! * ADDITIONAL DECLARATIONS FOR "STANDARD Z" CALCULATIONS:
REAL*8 :: ZSTZ(JPN),ZSTZH(JPNP)

!     =======================================================================

!     * Additional tuning variables:

! * ZP1: pressure of the full layer l=1, in Pa:
ZP1=1000.
! * ZVP00: standard surface pressure (to compute A and B), in pascals:
ZVP00=101325.
! * ZVP00PR: standard surface pressure (to print pressures), in pascals:
ZVP00PR=101325.
! * ZVP200: standard pressure at 200m (mean orography on the Earth) in Pa.:
ZVP200=98945.37974
! * ZALT_BOT: altitude of the bottom full level, in metres.
ZALT_BOT=5.

! Domains are counted from bottom to top.
! * ZALT_DOM: altitude of top of vertical domains, in metres.
!   (ZALT_DOM(jpdom) is automatically computed).
ZALT_DOM(1)=488.
ZALT_DOM(2)=1457.
ZALT_DOM(3)=3028.
ZALT_DOM(4)=5456.
ZALT_DOM(5)=8117.
ZALT_DOM(6)=10874.
ZALT_DOM(7)=15226.
! * ZDALT_DOM: altitude depth at top of vertical domains, in metres.
!   (ZDALT_DOM(jpdom) is z(jlevh=1)-z(jlevh=2)).
ZDALT_DOM(1)=53.
ZDALT_DOM(2)=94.
ZDALT_DOM(3)=145.
ZDALT_DOM(4)=200.
ZDALT_DOM(5)=290.
ZDALT_DOM(6)=395.
ZDALT_DOM(7)=719.
ZDALT_DOM(8)=2068.
! * IT_DOM: number of layers in each vertical domain.
IT_DOM(1)=15
IT_DOM(2)=13
IT_DOM(3)=13
IT_DOM(4)=14
IT_DOM(5)=11
IT_DOM(6)=8
IT_DOM(7)=8
IT_DOM(JPDOM)=JPN-SUM(IT_DOM(1:JPDOM-1))
! * CLNAM_DOM: name of each vertical domain.
CLNAM_DOM(1)='PBLS   '
CLNAM_DOM(2)='PBL    '
CLNAM_DOM(3)='ZON8570'
CLNAM_DOM(4)='ZON7050'
CLNAM_DOM(5)='ZON5035'
CLNAM_DOM(6)='ZON3520'
CLNAM_DOM(7)='TROPOBT'
CLNAM_DOM(8)='TROPOTP'

! * LLAPRXPK:
!   Full layers are assumed to be computed as for the options
!   LVERTFE=F, NDLNPR=0 of ARPEGE/ALADIN.
!   LLAPRXPK=T => pressure(l)=0.5(pressure(lbar-1)+pressure(lbar))
!    ("l" stands for full levels, "lbar" for half levels).
!   LLAPRXPK=F => a more tricky way to compute pressure(l).
!   When using the vertical layers for LVERTFE=F, NDLNPR=0, LAPRXPK=F
!    in the model, it is recommended to use LLAPRXPK=F.
!   When using the vertical layers for LVERTFE=F, NDLNPR=1,
!    in the model, it is recommended to use LLAPRXPK=F.
!   When using the vertical layers for LVERTFE=F, NDLNPR=0, LAPRXPK=T
!    of for LVERTFE=T, it is recommended to use LLAPRXPK=T.
LLAPRXPK=.FALSE.

! * Controls the hybridicity (recommended values between -3 and -1,
!   ZALPH must never be > -1).
ZALPH=-1.6 

! * Output files: IFILE0 to IFILE3:
IFILE0=50
IFILE1=51
IFILE2=52
IFILE3=53

!     =======================================================================

IN=JPN
INP=JPNP
INPRES=JPNPRES
INSIGM=JPNSIGM 
IDOM=JPDOM

I1=1

!     =======================================================================

!     * Computation of mapping function ZM(JLEV)=m(x(JLEV))
!       ZM is equal to pressure/ZVP00 at locations where surface pressure is ZVP00
!       ZM is 0 at the top and 1 at the bottom.

! - Treatment of bottom layer.
ZALT_PROV(1)=ZALT_BOT
CALL PRESTA(I1,ZALT_PROV,ZPRE_PROV)
! exact for LLAPRXPK=T, close to right solution for LLAPRXPK=F
ZPREH_PROV(1)=ZVP00+2.*(ZPRE_PROV(1)-ZVP00)
CALL ALTSTA(I1,ZPREH_PROV,ZALTH_PROV)
ZALTF(IN)=ZALT_BOT
ZALTH(INP)=0.
ZALTH(IN)=ZALTH_PROV(1)
ZPREF(IN)=ZPRE_PROV(1)
ZPREH(INP)=ZVP00
ZPREH(IN)=ZPREH_PROV(1)
ZDALT_BOT=ZALTH(IN)-ZALTH(INP)

! - Treatment of top layer.
IF (LLAPRXPK) THEN
  ZP1H=2.*ZP1
ELSE
  ZP1H=EXP(1.)*ZP1
ENDIF
ZPRE_PROV(1)=ZP1
ZPREH_PROV(1)=ZP1H
CALL ALTSTA(I1,ZPRE_PROV,ZALT_PROV)
CALL ALTSTA(I1,ZPREH_PROV,ZALTH_PROV)
ZALTF(1)=ZALT_PROV(1)
ZALTH(2)=ZALTH_PROV(1)
ZPREF(1)=ZPRE_PROV(1)
ZPREH(2)=ZPREH_PROV(1)
ZALT_DOM(IDOM)=ZALTH(2)

! - Evaluate number of recommended levels in each "vertical domain",
!   in order to have regular variations of altitude depths.

I_BOT=1
ZI_DOM(1)=2.*(ZALT_DOM(1)-ZALTH(IN))/(ZDALT_BOT+ZDALT_DOM(1))
I_DOM(1)=NINT(ZI_DOM(1))
DO JDOM=2,IDOM-1
  ZI_DOM(JDOM)=2.*(ZALT_DOM(JDOM)-ZALT_DOM(JDOM-1))/(ZDALT_DOM(JDOM)+ZDALT_DOM(JDOM-1))
  I_DOM(JDOM)=NINT(ZI_DOM(JDOM))
ENDDO
ZI_DOM(IDOM)=1.+2.*(ZALT_DOM(IDOM)-ZALT_DOM(IDOM-1))/(ZDALT_DOM(IDOM)+ZDALT_DOM(IDOM-1))
I_DOM(IDOM)=NINT(ZI_DOM(IDOM))
ZI_TOT=1.+SUM(ZI_DOM(1:IDOM))
I_TOT=I_BOT+SUM(I_DOM(1:IDOM))

write(6,*) ' For requested levels and levels depths, recommended numbers of layers are:'
write(6,'(A,I2)') ' recommended value of IT_DOM( 1) around ',I_DOM(1)+I_BOT
DO JDOM=2,IDOM
  write(6,'(A,I2,A,I2)') ' recommended value of IT_DOM(',JDOM,') around ',I_DOM(JDOM)
ENDDO
write(6,'(A,I3)') ' recommended value of JPN around ',NINT(ZI_TOT)

DO JDOM=1,IDOM
  IF (I_DOM(JDOM) < 2) THEN
    write(6,'(A,A,A7)') ' Inconsistent reference values for vertical domain ',CLNAM_DOM(JDOM)
    write(6,'(A,I2,A,I2,A)') ' Raise ZALT_DOM(',JDOM,') or reduce ZDALT_DOM(',JDOM,')'
    write(6,*) ' Program stops.'
    STOP
  ENDIF
ENDDO

! - Treatment of vertical domain nr 1.
 
ILEV=IN
ZLEV1=REAL(ILEV+1,8)
ZLEV2=REAL(ILEV,8)
ZLEV3=REAL(ILEV-IT_DOM(1)+2,8)
ZLEV4=REAL(ILEV-IT_DOM(1)+1,8)
ZVAL1=ZALTH(ILEV+1)
ZVAL2=ZALTH(ILEV)
ZVAL3=ZALT_DOM(1)-ZDALT_DOM(1)
ZVAL4=ZALT_DOM(1)
DO JLEV=1,IT_DOM(1)-3
  ILEV=ILEV-1
  ZLEV=REAL(ILEV,8)
  ZC1=(ZLEV-ZLEV2)*(ZLEV-ZLEV3)*(ZLEV-ZLEV4)/((ZLEV1-ZLEV2)*(ZLEV1-ZLEV3)*(ZLEV1-ZLEV4))
  ZC2=(ZLEV-ZLEV1)*(ZLEV-ZLEV3)*(ZLEV-ZLEV4)/((ZLEV2-ZLEV1)*(ZLEV2-ZLEV3)*(ZLEV2-ZLEV4))
  ZC3=(ZLEV-ZLEV1)*(ZLEV-ZLEV2)*(ZLEV-ZLEV4)/((ZLEV3-ZLEV1)*(ZLEV3-ZLEV2)*(ZLEV3-ZLEV4))
  ZC4=(ZLEV-ZLEV1)*(ZLEV-ZLEV2)*(ZLEV-ZLEV3)/((ZLEV4-ZLEV1)*(ZLEV4-ZLEV2)*(ZLEV4-ZLEV3))
  ZALTH(ILEV)=ZC1*ZVAL1+ZC2*ZVAL2+ZC3*ZVAL3+ZC4*ZVAL4
ENDDO
ILEV=ILEV-1
ZALTH(ILEV)=ZVAL3
ILEV=ILEV-1
ZALTH(ILEV)=ZVAL4

! - Treatment of vertical domains nr 2 to IDOM-1.

DO JDOM=2,IDOM-1
  ZLEV0=REAL(ILEV+2,8)
  ZLEV1=REAL(ILEV+1,8)
  ZLEV2=REAL(ILEV,8)
  ZLEV3=REAL(ILEV-IT_DOM(JDOM)+1,8)
  ZLEV4=REAL(ILEV-IT_DOM(JDOM),8)
  ZVAL0=ZALTH(ILEV+2)
  ZVAL1=ZALTH(ILEV+1)
  ZVAL2=ZALTH(ILEV)
  ZVAL3=ZALT_DOM(JDOM)-ZDALT_DOM(JDOM)
  ZVAL4=ZALT_DOM(JDOM)
  DO JLEV=1,IT_DOM(JDOM)-2
    ILEV=ILEV-1
    ZLEV=REAL(ILEV,8)
    ZC0=(ZLEV-ZLEV1)*(ZLEV-ZLEV2)*(ZLEV-ZLEV3)*(ZLEV-ZLEV4)/((ZLEV0-ZLEV1)*(ZLEV0-ZLEV2)*(ZLEV0-ZLEV3)*(ZLEV0-ZLEV4))
    ZC1=(ZLEV-ZLEV0)*(ZLEV-ZLEV2)*(ZLEV-ZLEV3)*(ZLEV-ZLEV4)/((ZLEV1-ZLEV0)*(ZLEV1-ZLEV2)*(ZLEV1-ZLEV3)*(ZLEV1-ZLEV4))
    ZC2=(ZLEV-ZLEV0)*(ZLEV-ZLEV1)*(ZLEV-ZLEV3)*(ZLEV-ZLEV4)/((ZLEV2-ZLEV0)*(ZLEV2-ZLEV1)*(ZLEV2-ZLEV3)*(ZLEV2-ZLEV4))
    ZC3=(ZLEV-ZLEV0)*(ZLEV-ZLEV1)*(ZLEV-ZLEV2)*(ZLEV-ZLEV4)/((ZLEV3-ZLEV0)*(ZLEV3-ZLEV1)*(ZLEV3-ZLEV2)*(ZLEV3-ZLEV4))
    ZC4=(ZLEV-ZLEV0)*(ZLEV-ZLEV1)*(ZLEV-ZLEV2)*(ZLEV-ZLEV3)/((ZLEV4-ZLEV0)*(ZLEV4-ZLEV1)*(ZLEV4-ZLEV2)*(ZLEV4-ZLEV3))
    ZALTH(ILEV)=ZC0*ZVAL0+ZC1*ZVAL1+ZC2*ZVAL2+ZC3*ZVAL3+ZC4*ZVAL4
  ENDDO
  ILEV=ILEV-1
  ZALTH(ILEV)=ZVAL3
  ILEV=ILEV-1
  ZALTH(ILEV)=ZVAL4
ENDDO

! - Treatment of vertical domain nr IDOM.

II=IT_DOM(IDOM)-1
ZLEV0=REAL(ILEV+2,8)
ZLEV1=REAL(ILEV+1,8)
ZLEV2=REAL(ILEV,8)
ZLEV3=REAL(ILEV-II+1,8)
ZLEV4=REAL(ILEV-II,8)
ZVAL0=ZALTH(ILEV+2)
ZVAL1=ZALTH(ILEV+1)
ZVAL2=ZALTH(ILEV)
ZVAL3=ZALT_DOM(IDOM)-ZDALT_DOM(IDOM)
ZVAL4=ZALT_DOM(IDOM)
DO JLEV=1,II-2
  ILEV=ILEV-1
  ZLEV=REAL(ILEV,8)
  ZC0=(ZLEV-ZLEV1)*(ZLEV-ZLEV2)*(ZLEV-ZLEV3)*(ZLEV-ZLEV4)/((ZLEV0-ZLEV1)*(ZLEV0-ZLEV2)*(ZLEV0-ZLEV3)*(ZLEV0-ZLEV4))
  ZC1=(ZLEV-ZLEV0)*(ZLEV-ZLEV2)*(ZLEV-ZLEV3)*(ZLEV-ZLEV4)/((ZLEV1-ZLEV0)*(ZLEV1-ZLEV2)*(ZLEV1-ZLEV3)*(ZLEV1-ZLEV4))
  ZC2=(ZLEV-ZLEV0)*(ZLEV-ZLEV1)*(ZLEV-ZLEV3)*(ZLEV-ZLEV4)/((ZLEV2-ZLEV0)*(ZLEV2-ZLEV1)*(ZLEV2-ZLEV3)*(ZLEV2-ZLEV4))
  ZC3=(ZLEV-ZLEV0)*(ZLEV-ZLEV1)*(ZLEV-ZLEV2)*(ZLEV-ZLEV4)/((ZLEV3-ZLEV0)*(ZLEV3-ZLEV1)*(ZLEV3-ZLEV2)*(ZLEV3-ZLEV4))
  ZC4=(ZLEV-ZLEV0)*(ZLEV-ZLEV1)*(ZLEV-ZLEV2)*(ZLEV-ZLEV3)/((ZLEV4-ZLEV0)*(ZLEV4-ZLEV1)*(ZLEV4-ZLEV2)*(ZLEV4-ZLEV3))
  ZALTH(ILEV)=ZC0*ZVAL0+ZC1*ZVAL1+ZC2*ZVAL2+ZC3*ZVAL3+ZC4*ZVAL4
ENDDO
ILEV=ILEV-1
ZALTH(ILEV)=ZVAL3
ILEV=ILEV-2

IF (ILEV /= 1) THEN
  write(6,*) ' Error in ILEV in upper zone'
  write(6,*) ' ILEV must be equal to 1'
  write(6,*) ' ILEV=',ILEV
  write(6,*) ' Program stops.'
  STOP
ENDIF

! - Compute half-level pressures from half-level altitudes using standard atm. 
CALL PRESTA(IN-1,ZALTH(2:IN),ZPREH(2:IN))

! - Fill ZM. 

DO JLEV=0,IN
  ZM(JLEV)=ZPREH(JLEV+1)/ZVP00
  ZM(JLEV)=MAX(0.,MIN(1.,ZM(JLEV)))
ENDDO

WRITE(IFILE0,*) " ZM: "
DO JLEV=0,IN
  WRITE(IFILE0,'(1X,F15.7)') ZM(JLEV)
ENDDO

!     =======================================================================

!     * Computation of *mapped hybridicity* function ZH(JLEV)=h(m(x(JLEV)))

ZETAP=ZM(INPRES)
ZETAS=ZM(IN-INSIGM)

ZAA=ZALPH*ZETAS*ZETAS/(ZETAS-ZETAP)
ZBB=1.+ZAA/ZETAS

WRITE(IFILE0,*) " ZETAP: ",ZETAP
WRITE(IFILE0,*) " ZETAS: ",ZETAS
WRITE(IFILE0,*) " ZAA: ",ZAA
WRITE(IFILE0,*) " ZBB: ",ZBB

DO JLEV=0,INPRES
  ZH(JLEV)=0.
ENDDO

DO JLEV=INPRES+1,(IN-INSIGM)-1
  ZX=ZM(JLEV)
  ZH(JLEV)=ZAA/(ZBB-((ZX-ZETAP)/(ZETAS-ZETAP))**ZALPH)
ENDDO

DO JLEV=(IN-INSIGM),IN
  ZX=ZM(JLEV)
  ZH(JLEV)=ZX
ENDDO

DO JLEV=0,IN
  ZH(JLEV)=MAX(0.,MIN(1.,ZH(JLEV)))
ENDDO

WRITE(IFILE0,*) " ZH: "
DO JLEV=0,IN
  WRITE(IFILE0,'(1X,F15.7)') ZH(JLEV)
ENDDO

!     =======================================================================

!     * A and B functions on half layers (put in ZAF and ZBF):

DO JLEV=0,IN
  ZAF(JLEV+1)=ZVP00*(ZM(JLEV)-ZH(JLEV))
  ZBF(JLEV+1)=ZH(JLEV)
ENDDO

!     =======================================================================

!     * Half level pressures (put in ZPREHYDH):

DO JK=1,INP
  ZPREHYDH(JK)=ZAF(JK)+ZBF(JK)*ZVP00PR
ENDDO

!     =======================================================================

!     * Full level pressures (put in ZPREHYDF):

IF (.NOT.LLAPRXPK) THEN
  ZPREHYDF(1)=ZPREHYDH(2)/EXP(1.)
  DO JLEV=2,IN
    ZPREHYDF(JLEV)=EXP( &
     &    (ZPREHYDH(JLEV+1)*LOG(ZPREHYDH(JLEV+1)) &
     &     -ZPREHYDH(JLEV)*LOG(ZPREHYDH(JLEV)))/ &
     &    (ZPREHYDH(JLEV+1)-ZPREHYDH(JLEV)) - 1. &
     &    )
  ENDDO
ELSE
  ZPREHYDF(1)=0.5*ZPREHYDH(2)
  DO JLEV=2,IN
    ZPREHYDF(JLEV)=0.5*(ZPREHYDH(JLEV+1)+ZPREHYDH(JLEV))
  ENDDO
ENDIF

!     =======================================================================

!     * Pressure depths at full levels (put in ZDELP):

DO JLEV=1,IN
  ZDELP(JLEV)=ZPREHYDH(JLEV+1)-ZPREHYDH(JLEV)
ENDDO

!     =======================================================================

!     * Standard altitude at full levels (put in ZSTZ):

CALL ALTSTA(IN,ZPREHYDF,ZSTZ)

!     =======================================================================

!     * Standard altitude at half levels (put in ZSTZH):

CALL ALTSTA(IN,ZPREHYDH(2:INP),ZSTZH(2:INP))
ZSTZH(1)=ZSTZH(2)+2.*(ZSTZ(1)-ZSTZH(2))

!     =======================================================================

!     * Printings:

DO JK=1,INP
  ZRST(JK)=ZBF(JK)*ZVP200/(ZBF(JK)*ZVP200+ZAF(JK))
  ZSIG(JK)=ZAF(JK)/ZVP200+ZBF(JK)
ENDDO

WRITE(IFILE1,*)
WRITE(IFILE1,'(1X,A,1X,I4)') ' * Number of levels=',IN
WRITE(IFILE1,'(1X,A,1X,I4)') ' * Number of hybrid levels=',IN-INPRES-INSIGM
WRITE(IFILE1,'(1X,A,1X,I4)') ' * Number of pure sigma levels=',INSIGM
WRITE(IFILE1,'(1X,A,1X,I4)') ' * Number of pure pressure levels=',INPRES
WRITE(IFILE1,'(1X,A,1X,I4)') ' * Number of vertical domains=',IDOM

WRITE(IFILE1,*)
DO JDOM=1,IDOM
  WRITE(IFILE1,'(1X,A,A,A,1X,I4)') &
     &   ' * Number of levels in vertical domain ',CLNAM_DOM(JDOM),' =',IT_DOM(JDOM)
ENDDO

WRITE(IFILE1,*)
WRITE(IFILE1,'(1X,A,1X,F15.7,1X,A,1X,F15.7)') &
 & ' * Altitude of bottom full level:              ZALT_BOT    =',ZALT_BOT, &
 & ';  Delta z: ZDALT_BOT    =',ZDALT_BOT
DO JDOM=1,IDOM-1
  WRITE(IFILE1,'(1X,3A,I2,A,1X,F15.7,1X,A,I2,A,1X,F15.7)') &
   &   ' * Altitude of top of vertical domain ', &
   &  CLNAM_DOM(JDOM),': ZALT_DOM(',JDOM,')=',ZALT_DOM(JDOM), &
   &   ';  Delta z: ZDALT_DOM(',JDOM,')=',ZDALT_DOM(JDOM)
ENDDO
WRITE(IFILE1,'(1X,A,29X,F15.7,1X,A,I2,A,1X,F15.7)') &
 & ' * Altitude of half level nr 1: ',ZSTZH(2), &
 & ';  Delta z: ZDALT_DOM(',IDOM,')=',ZDALT_DOM(IDOM)

WRITE(IFILE1,*)
WRITE(IFILE1,'(1X,A,1X,F15.7)') ' * Reference pressure at 200m: ZVP200=',ZVP200
WRITE(IFILE1,'(1X,A,1X,F15.7)') ' * Reference pressure at 0m: ZVP00PR=',ZVP00PR
WRITE(IFILE1,'(1X,A,1X,F15.7)') ' * Pressure of the layer nr 1: ZP1=',ZP1

WRITE(IFILE1,*)
WRITE(IFILE1,'(1X,A,1X,L2)') ' * LLAPRXPK=',LLAPRXPK
WRITE(IFILE1,'(1X,A,1X,F15.7)') ' * ZALPH=',ZALPH

WRITE(IFILE1,*)
WRITE(IFILE1,'(A3,A13,A13,3A10,3A14,3A12)') &
 & 'ILa','      A      ','      B      ', &
 & '   Sigma  ',' 1 - Sigma',' Rap Si-Hy', &
 & '  Prehyd(lbar)','  Prehyd(l)   ', &
 & ' [D Prehyd](l)','   Alti(l)  ',' Alti(lbar) ', &
 & ' [D Alti](l)'
WRITE(IFILE1,*)

DO JK=1,1
  WRITE(IFILE1,'(I3,F13.6,F13.10,3F10.7,F12.4)') &
   & JK-1,ZAF(JK),ZBF(JK),ZSIG(JK),1.-ZSIG(JK),ZRST(JK),ZPREHYDH(JK)
ENDDO
DO JK=2,INP
  WRITE(IFILE1,'(I3,F13.6,F13.10,3F10.7,3F14.6,3F12.4)') &
   & JK-1,ZAF(JK),ZBF(JK),ZSIG(JK),1.-ZSIG(JK),ZRST(JK), &
   & ZPREHYDH(JK),ZPREHYDF(JK-1),ZDELP(JK-1), &
   & ZSTZ(JK-1),ZSTZH(JK),ZSTZH(JK-1)-ZSTZH(JK)
ENDDO

WRITE(IFILE2,*)
DO JK=1,INP
  WRITE(IFILE2,'(A12,F7.3,A28,I3)') &
   & '\\put( 20.00,',100.*(1.-ZSIG(JK)), &
   & '){\\line(1,0){50.00}} % jlev=',JK-1
ENDDO

WRITE(IFILE3,'(A)') ' Namelist obtained with:'

WRITE(IFILE3,*)
WRITE(IFILE3,'(1X,A,1X,I4)') ' * Number of levels=',IN
WRITE(IFILE3,'(1X,A,1X,I4)') ' * Number of hybrid levels=',IN-INPRES-INSIGM
WRITE(IFILE3,'(1X,A,1X,I4)') ' * Number of pure sigma levels=',INSIGM
WRITE(IFILE3,'(1X,A,1X,I4)') ' * Number of pure pressure levels=',INPRES
WRITE(IFILE3,'(1X,A,1X,I4)') ' * Number of vertical domains=',IDOM

WRITE(IFILE3,*)
DO JDOM=1,IDOM
  WRITE(IFILE3,'(1X,A,A,A,1X,I4)') &
   & ' * Number of levels in vertical domain ', &
   & CLNAM_DOM(JDOM),' =',IT_DOM(JDOM)
ENDDO

WRITE(IFILE3,*)
WRITE(IFILE3,'(1X,A,1X,F15.7,1X,A,1X,F15.7)') &
 & ' * Altitude of bottom full level:              ZALT_BOT    =',ZALT_BOT, &
 & ';  Delta z: ZDALT_BOT    =',ZDALT_BOT
DO JDOM=1,IDOM-1
  WRITE(IFILE3,'(1X,3A,I2,A,1X,F15.7,1X,A,I2,A,1X,F15.7)') &
   & ' * Altitude of top of vertical domain ', &
   & CLNAM_DOM(JDOM),': ZALT_DOM(',JDOM,')=',ZALT_DOM(JDOM), &
   & ';  Delta z: ZDALT_DOM(',JDOM,')=',ZDALT_DOM(JDOM)
ENDDO
WRITE(IFILE3,'(1X,A,29X,F15.7,1X,A,I2,A,1X,F15.7)') &
 & ' * Altitude of half level nr 1: ',ZSTZH(2), &
 & ';  Delta z: ZDALT_DOM(',IDOM,')=',ZDALT_DOM(IDOM)

WRITE(IFILE3,*)
WRITE(IFILE3,'(1X,A,1X,F15.7)') ' * Reference pressure at 200m: ZVP200=',ZVP200
WRITE(IFILE3,'(1X,A,1X,F15.7)') ' * Reference pressure at 0m: ZVP00PR=',ZVP00PR
WRITE(IFILE3,'(1X,A,1X,F15.7)') ' * Pressure of the layer nr 1: ZP1=',ZP1

WRITE(IFILE3,*)
WRITE(IFILE3,'(1X,A,1X,L2)') ' * LLAPRXPK=',LLAPRXPK
WRITE(IFILE3,'(1X,A,1X,F15.7)') ' * ZALPH=',ZALPH

WRITE(IFILE3,*)
WRITE(IFILE3,*) ' &NAMVV1'
WRITE(IFILE3,*) '   DVALH(  0)=0.,'
DO JK=2,INP
  ! WRITE(IFILE3,'(5X,F12.6,A)') ZAF(JK),','
  WRITE(IFILE3,'(A,I3,A,F10.4,A)') '    DVALH(',JK-1,')=',ZAF(JK),','
ENDDO
WRITE(IFILE3,*) '   DVBH(  0)=0.,'
DO JK=2,INP
  ! WRITE(IFILE3,'(5X,F12.10,A)') ZBF(JK),','
  WRITE(IFILE3,'(A,I3,A,F10.8,A)') '    DVBH(',JK-1,')=',ZBF(JK),','
ENDDO
WRITE(IFILE3,*) ' /'

!     ------------------------------------------------------------------

STOP
END

SUBROUTINE ALTSTA(KLEV,PREHYD,PSTZ)

!     ------------------------------------------------------------------
!     Computes standard altitude from standard pressure.
!     Code taken from SUSTA and PPSTA and adapted.

!     Input:
!      KLEV    : number of levels
!      PREHYD  : standard pressure

!     Output:
!      PSTZ    : standard altitude
!     ------------------------------------------------------------------

IMPLICIT NONE

INTEGER*8,INTENT(IN) :: KLEV
REAL*8,INTENT(IN)    :: PREHYD(KLEV)
REAL*8,INTENT(OUT)   :: PSTZ(KLEV)

!     ------------------------------------------------------------------

INTEGER*8,PARAMETER :: JPPRO=9

REAL*8 :: ZVP00
LOGICAL :: LLGRZER_ST
INTEGER*8 :: JLEV,IPR,JJPR,IPRO_ST(KLEV)
REAL*8 :: ZSUR,Z_RD,Z_RG,ZROG
REAL*8 :: Z_RZTROP
REAL*8 :: Z_RZSTRA
REAL*8 :: Z_RZSTR2
REAL*8 :: Z_RZSTPO
REAL*8 :: Z_RZMESO
REAL*8 :: Z_RZMES2
REAL*8 :: Z_RZMEPO
REAL*8 :: Z_RZABOV
REAL*8 :: Z_RDTDZ1
REAL*8 :: Z_RDTDZ2
REAL*8 :: Z_RDTDZ3
REAL*8 :: Z_RDTDZ4
REAL*8 :: Z_RDTDZ5
REAL*8 :: Z_RDTDZ6
REAL*8 :: Z_RDTDZ7
REAL*8 :: Z_RDTDZ8
REAL*8 :: Z_RDTDZ9
REAL*8 :: Z_RTSUR
REAL*8 :: ZZDT_ST,ZZDZ_ST
REAL*8 :: ZZ_ST(JPPRO)
REAL*8 :: ZDTDZ_ST(JPPRO)
REAL*8 :: ZT_ST(JPPRO)
REAL*8 :: ZP_ST(JPPRO)
REAL*8 :: ZLNP_ST(JPPRO)
REAL*8 :: ZIP_ST(JPPRO)
REAL*8 :: ZIDTDZ_ST(JPPRO)

!     =======================================================================

!     * Standard altitude (put in PSTZ):
!       These calculations have been adapted from SUSTA and PPSTA

ZSUR =0.

! - constants:
! Z_RD=1000.*6.0221367*1.380658/28.9644
Z_RD=287.0596737
Z_RG=9.80665

! - standard altitude at some referenced levels:
Z_RZTROP=11000.
Z_RZSTRA=20000.
Z_RZSTR2=32100.
Z_RZSTPO=47400.
Z_RZMESO=51400.
Z_RZMES2=71700.
Z_RZMEPO=85700.
Z_RZABOV=100000.

! - standard DT/Dz at some referenced atmosphere layers:
Z_RDTDZ1=-6.5E-3
Z_RDTDZ2=0.
Z_RDTDZ3=1.E-3
Z_RDTDZ4=2.75E-3
Z_RDTDZ5=0.
Z_RDTDZ6=-2.75E-3
Z_RDTDZ7=-1.97E-3
Z_RDTDZ8=0.
Z_RDTDZ9=0.

! - surface standard temperature:
Z_RTSUR=288.15

! - surface standard pressure:
ZVP00=101325.

DO JJPR=1,JPPRO
  IF(JJPR == 1) THEN
    ZZ_ST(1)=ZSUR
    ZDTDZ_ST(1)=Z_RDTDZ1
    ZT_ST(1)=Z_RTSUR
    ZP_ST(1)=ZVP00
  ELSEIF(JJPR == 2) THEN
    ZZ_ST(2)=Z_RZTROP 
    ZDTDZ_ST(2)=Z_RDTDZ2
  ELSEIF(JJPR == 3) THEN
    ZZ_ST(3)=Z_RZSTRA 
    ZDTDZ_ST(3)=Z_RDTDZ3
  ELSEIF(JJPR == 4) THEN
    ZZ_ST(4)=Z_RZSTR2 
    ZDTDZ_ST(4)=Z_RDTDZ4
  ELSEIF(JJPR == 5) THEN
    ZZ_ST(5)=Z_RZSTPO 
    ZDTDZ_ST(5)=Z_RDTDZ5
  ELSEIF(JJPR == 6) THEN
    ZZ_ST(6)=Z_RZMESO
    ZDTDZ_ST(6)=Z_RDTDZ6
  ELSEIF(JJPR == 7) THEN
    ZZ_ST(7)=Z_RZMES2
    ZDTDZ_ST(7)=Z_RDTDZ7
  ELSEIF(JJPR == 8) THEN
    ZZ_ST(8)=Z_RZMEPO
    ZDTDZ_ST(8)=Z_RDTDZ8
  ELSEIF(JJPR == 9) THEN
    ZZ_ST(9)=Z_RZABOV
    ZDTDZ_ST(9)=Z_RDTDZ9
  ENDIF
ENDDO

! - standard temperature and pressure at some referenced levels:
DO JJPR=1,JPPRO-1
  ZZDT_ST=ZDTDZ_ST(JJPR)
  ZZDZ_ST=ZZ_ST(JJPR+1)-ZZ_ST(JJPR)
  IF (ZZDT_ST /= 0.0) THEN
    ZT_ST(JJPR+1)=ZT_ST(JJPR)+ZZDT_ST*ZZDZ_ST
    ZP_ST(JJPR+1)=ZP_ST(JJPR)*(1.0+ZZDT_ST*ZZDZ_ST/ZT_ST(JJPR))**(-Z_RG/Z_RD/ZZDT_ST)
  ELSE
    ZT_ST(JJPR+1)=ZT_ST(JJPR)
    ZP_ST(JJPR+1)=ZP_ST(JJPR)*EXP(-Z_RG/Z_RD/ZT_ST(JJPR)*ZZDZ_ST)
  ENDIF
ENDDO

! LLGRZER_ST : .true. if one or more values of ZDTDZ are zero, .false. otherwise
LLGRZER_ST=.FALSE.
DO JJPR=1,JPPRO
  ZLNP_ST(JJPR)=LOG(ZP_ST(JJPR))
  ZIP_ST(JJPR)=1.0/ZP_ST(JJPR)
  IF (ZDTDZ_ST(JJPR) == 0.0) THEN
    ZIDTDZ_ST(JJPR)=0.0
    LLGRZER_ST=.TRUE.
  ELSE
    ZIDTDZ_ST(JJPR)=1.0/ZDTDZ_ST(JJPR)
  ENDIF
ENDDO

DO JLEV=1,KLEV
  IF(PREHYD(JLEV) >= ZP_ST(2)) THEN
    IPRO_ST(JLEV)=1
  ELSEIF(PREHYD(JLEV) >= ZP_ST(3)) THEN
    IPRO_ST(JLEV)=2
  ELSEIF(PREHYD(JLEV) >= ZP_ST(4)) THEN
    IPRO_ST(JLEV)=3
  ELSEIF(PREHYD(JLEV) >= ZP_ST(5)) THEN
    IPRO_ST(JLEV)=4
  ELSEIF(PREHYD(JLEV) >= ZP_ST(6)) THEN
    IPRO_ST(JLEV)=5
  ELSEIF(PREHYD(JLEV) >= ZP_ST(7)) THEN
    IPRO_ST(JLEV)=6
  ELSEIF(PREHYD(JLEV) >= ZP_ST(8)) THEN
    IPRO_ST(JLEV)=7
  ELSEIF(PREHYD(JLEV) >= ZP_ST(9)) THEN
    IPRO_ST(JLEV)=8
  ELSE
    IPRO_ST(JLEV)=9
  ENDIF
ENDDO

ZROG=Z_RD/Z_RG

IF(.NOT.LLGRZER_ST) THEN
  DO JLEV=1,KLEV
    IPR=IPRO_ST(JLEV)
    PSTZ(JLEV)=ZZ_ST(IPR)+ZT_ST(IPR)*ZIDTDZ_ST(IPR)*((PREHYD(JLEV)*ZIP_ST(IPR))**(-ZDTDZ_ST(IPR)*ZROG)-1.0)
  ENDDO
ELSE
  DO JLEV=1,KLEV
    IPR=IPRO_ST(JLEV)
    IF(ZDTDZ_ST(IPR) /= 0.0) THEN
      PSTZ(JLEV)=ZZ_ST(IPR)+ZT_ST(IPR)*ZIDTDZ_ST(IPR)*((PREHYD(JLEV)*ZIP_ST(IPR))**(-ZDTDZ_ST(IPR)*ZROG)-1.0)
    ELSE
      PSTZ(JLEV)=ZZ_ST(IPR)-ZT_ST(IPR)*ZROG*(LOG(PREHYD(JLEV))-ZLNP_ST(IPR))
    ENDIF
  ENDDO
ENDIF

!     =======================================================================

RETURN
END SUBROUTINE ALTSTA

SUBROUTINE PRESTA(KLEV,PSTZ,PREHYD)

!     ------------------------------------------------------------------
!     Computes standard pressure from standard altitude.
!     Code taken from SUSTA and PPSTA and adapted.

!     Input:
!      KLEV    : number of levels
!      PSTZ    : standard altitude

!     Output:
!      PREHYD  : standard pressure
!     ------------------------------------------------------------------

IMPLICIT NONE

INTEGER*8,INTENT(IN) :: KLEV
REAL*8,INTENT(IN)    :: PSTZ(KLEV)
REAL*8,INTENT(OUT)   :: PREHYD(KLEV)

!     ------------------------------------------------------------------

INTEGER*8,PARAMETER :: JPLAY=10
REAL*8 :: ZPP_ST(JPLAY,2)
REAL*8 :: ZEPSZ
INTEGER*8 :: IITER,JITER
INTEGER*8 :: JLEV
REAL*8 :: ZSTZDKM(KLEV)
REAL*8 :: ZSTZ(KLEV)
INTEGER*8 :: ISTZDKM(KLEV)
REAL*8 :: ZSTP1(KLEV),ZSTP2(KLEV)
REAL*8 :: ZSTZ1(KLEV),ZSTZ2(KLEV)
REAL*8 :: ZCOEF(KLEV)

!     =======================================================================

! * ZPP_ST:
!   ZPP_ST(n,1) and ZPP_ST(n,2) are possible pressure bounds,
!   where n=int(z in 10km)+1
!   example:
!    z=1500m: possible pressure bounds are given by ZPP_ST(1,1) and ZPP_ST(1,2)
!    z=88.5km: possible pressure bounds are given by ZPP_ST(9,1) and ZPP_ST(9,2)
!   ZPP_ST(n,1) < ZPP_ST(n,2)

ZPP_ST( 1,1)= 26436.75
ZPP_ST( 2,1)=  5475.25
ZPP_ST( 3,1)=  1171.75
ZPP_ST( 4,1)=   276.75
ZPP_ST( 5,1)=    75.25
ZPP_ST( 6,1)=    20.25
ZPP_ST( 7,1)=     4.25
ZPP_ST( 8,1)=     0.75
ZPP_ST( 9,1)=     0.001
ZPP_ST(10,1)=     0.001

ZPP_ST( 1,2)=101325.
ZPP_ST( 2,2)= 26437.25
ZPP_ST( 3,2)=  5475.75
ZPP_ST( 4,2)=  1172.25
ZPP_ST( 5,2)=   277.25
ZPP_ST( 6,2)=    75.75
ZPP_ST( 7,2)=    20.75
ZPP_ST( 8,2)=     4.75
ZPP_ST( 9,2)=     1.25
ZPP_ST(10,2)=     1.25

!     =======================================================================

!     * Iterations:

IITER=20
ZEPSZ=0.00001

! - first guess:
DO JLEV=1,KLEV
  ZSTZDKM(JLEV) = PSTZ(JLEV)/10000.
  ISTZDKM(JLEV) = INT(ZSTZDKM(JLEV))+1
  IF (ISTZDKM(JLEV) > 10) ISTZDKM(JLEV)=10
  ZSTP1(JLEV) = ZPP_ST(ISTZDKM(JLEV),1)
  ZSTP2(JLEV) = ZPP_ST(ISTZDKM(JLEV),2)
ENDDO
CALL ALTSTA(KLEV,ZSTP1,ZSTZ1)
CALL ALTSTA(KLEV,ZSTP2,ZSTZ2)
DO JLEV=1,KLEV
  ZCOEF(JLEV)=(PSTZ(JLEV)-ZSTZ1(JLEV))/(ZSTZ2(JLEV)-ZSTZ1(JLEV))
  PREHYD(JLEV)=ZSTP1(JLEV)+ZCOEF(JLEV)*(ZSTP2(JLEV)-ZSTP1(JLEV))
ENDDO
CALL ALTSTA(KLEV,PREHYD,ZSTZ)

! - following iterations:
DO JITER=1,IITER
 DO JLEV=1,KLEV
  IF (ZSTZ(JLEV) - PSTZ(JLEV) > ZEPSZ) THEN
    ZSTP2(JLEV) = PREHYD(JLEV)
  ELSEIF (ZSTZ(JLEV) - PSTZ(JLEV) < - ZEPSZ) THEN
    ZSTP1(JLEV) = PREHYD(JLEV)
  ENDIF
 ENDDO
 CALL ALTSTA(KLEV,ZSTP1,ZSTZ1)
 CALL ALTSTA(KLEV,ZSTP2,ZSTZ2)
 DO JLEV=1,KLEV
  IF (ABS(ZSTZ2(JLEV)-ZSTZ1(JLEV)) > ZEPSZ) THEN
   ZCOEF(JLEV)=(PSTZ(JLEV)-ZSTZ1(JLEV))/(ZSTZ2(JLEV)-ZSTZ1(JLEV))
   PREHYD(JLEV)=ZSTP1(JLEV)+ZCOEF(JLEV)*(ZSTP2(JLEV)-ZSTP1(JLEV))
  ELSE
   PREHYD(JLEV)=ZSTP1(JLEV)
  ENDIF
 ENDDO
 CALL ALTSTA(KLEV,PREHYD,ZSTZ)
ENDDO

! - check that algorithm has converged:
DO JLEV=1,KLEV
  IF (ZSTZ(JLEV) - PSTZ(JLEV) > ZEPSZ) THEN
    write(6,*) ' for jlev=',jlev,' PREHYD is too low'
    write(6,*) ' increase iiter'
  ELSEIF (ZSTZ(JLEV) - PSTZ(JLEV) < - ZEPSZ) THEN
    write(6,*) ' for jlev=',jlev,' PREHYD is too high'
    write(6,*) ' increase iiter'
  ENDIF
ENDDO

!     =======================================================================

RETURN
END SUBROUTINE PRESTA

EOF

gfortran prog.F90
./a.out
vi fort.51
vi fort.53
\mv fort.50 output_a_et_b_mapping_L90sigma
\mv fort.51 output_a_et_b_infosup_L90sigma
\mv fort.52 output_a_et_b_latex_L90sigma
\mv fort.53 output_a_et_b_namvv1_L90sigma
#\rm prog.F90
